Odyssey {
  Program = listOf<Stmt, br> 

  Stmt = Expr

  Expr = Defun | Ternary | Assignment | CmpExp

  Defun = FormalParameterList "=>" Expr

  FormalParameterList =
    "(" ListOf<Parameter, ","> ")"

  Funcall = ident ArgList

  ArgList =
    "(" ListOf<Expr, ","> ")"

  Parameter = ident

  Assignment = (ArrayIndex | DotAccess | ident) "=" Expr

  Ternary = Expr "?" Expr ":" Expr

  CmpExp = AddExp ">" CmpExp -- gt
         | AddExp "<" CmpExp -- lt
         | AddExp "==" CmpExp -- eq
         | AddExp

  AddExp = AddExp "+" MulExp  -- plus
         | AddExp "-" MulExp -- minus
         | MulExp

  MulExp = MulExp "*" ExpExp -- times
         | MulExp "/" ExpExp -- div
         | ExpExp

  ExpExp = ExpExp "^" PriExp -- pow
         | PriExp

  PriExp = "(" Expr ")" -- parens
         | "-" PriExp -- neg
         | PriVal

  PriVal = Funcall | ArrayLit | ArrayIndex | StringLit | HashLit | DotAccess | num | ident

  ArrayIndex = (ArrayIndex | ident) "[" Expr "]"

  ArrayLit = "[" ListOf<Expr, ","> "]"

  HashLit = "{" ListOf<KeyValuePair, ","> "}"
  KeyValuePair = ident ":" Expr

  DotAccess = (DotAccess | ident) "." ident

  StringLit = "\"" #(~"\"" any)* "\""

  // builtin = 'print'
  ident = letter alnum*
  num = digit+

  br = ";" | "\n" | "\r"
}
